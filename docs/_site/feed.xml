<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-13T16:51:18+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Cryptologies</title><entry><title type="html">Encryption I (syntax)</title><link href="http://localhost:4000/2016/05/20/Encryption-I-(Syntax).html" rel="alternate" type="text/html" title="Encryption I (syntax)" /><published>2016-05-20T00:00:00+03:00</published><updated>2016-05-20T00:00:00+03:00</updated><id>http://localhost:4000/2016/05/20/Encryption-I-(Syntax)</id><content type="html" xml:base="http://localhost:4000/2016/05/20/Encryption-I-(Syntax).html">&lt;p&gt;An encryption function is a way to transform a sequence of characters into another sequence of characters. We introduce some notation to formalize this a little bit. Let $\mathcal{M}$ be the set of all sequences of characters that you care about (for example, $\mathcal{M}$ may be the set of all strings of ASCII characters of arbitrary length or the set of all string of zeros and ones of length $256$). These sequences of characters are often called &lt;em&gt;plaintexts&lt;/em&gt;. Let $\mathcal{C}$ be the set of all encrypted messages, i.e. another set of sequences of characters. These are called &lt;em&gt;cyphertexts&lt;/em&gt;. Then an encryption function is just a function $e:\mathcal{M}\to\mathcal{C}$ (&lt;em&gt;e&lt;/em&gt; stands for “encrypt”). 
To upgrade an encryption function to an encryption &lt;em&gt;scheme&lt;/em&gt;, one needs also a way to decrypt encoded messages: that is, a function $d:\mathcal{C}\to\mathcal{M}$. The obvious requirement is that the decryption recovers the original message, namely, $d(e(m)) = m$ for all $m\in\mathcal{M}$. Note that this implies that $e$ defines a bijection between $\mathcal{M}$ and $e(\mathcal{M})\subset\mathcal{C}$. 
&lt;!-- For many practical purposes, this is not good: to encode all $n$-bit strings we will need to use also strings of length $\ge n$. So perfect recoverability (i.e. $d\circ e = id$) may be too strong.  --&gt;
Also note that up to now we haven’t mentioned anything about security: after all, we can take $\mathcal{M}=\mathcal{C}$, $e=d=id$ in the definitions above.&lt;br /&gt;
In the final definition, the functions will actually be algorithms (we want the encryption to be computable), of polynomial-time complexity (efficiently computable). For technical reasons, they will be probabilistic algorithms. For a formal definition of probabilistic algorithms see &lt;a href=&quot;https://en.wikipedia.org/wiki/Probabilistic_Turing_machine&quot;&gt;wikipedia&lt;/a&gt; - basically it is a Turing machine that at each state tosses a coin to determine which of two transition functions it follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keys.&lt;/strong&gt;  Assume we have two PPT (probabilistic polynomial-time) algorithms $\mathtt{Encode}$ and $\mathtt{Decode}$, corresponding to the functions above. In modern cryptography, we require that all algorithms be publicly known &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. In view of this, these two algorithms do not suffice to provide a secure scheme if a sender wants to send a secret to a receiver over an insecure channel (insecure channel means that the cyphertext can be intercepted by an attacker): the attacker would simply run $\mathtt{Decode}$ on the cyphertext and recover the secret. There must be some data that distinguishes the receiver by any other entity: this piece of data is called key. We denote the set of keys by $\mathcal{K}$ (again some set of sequences of characters).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security parameter.&lt;/strong&gt; Thus, the third component of an encryption scheme will be a PPT algorithm that generates a key or keys. This component is common to practically every protocol in cryptography. The key-generation algorithm takes as input a positive integer $\lambda$, called &lt;em&gt;security parameter&lt;/em&gt;, in the form of a string of ones of length $\lambda$, denoted by $1^\lambda$. Most of the time this integer is correlated to the “complexity” of the key, for example its length.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The formal definition.&lt;/strong&gt; A private-key encryption scheme is a triple $(\mathtt{GenerateKey, Encode, Decode})$ of PPT algorithms such that:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;$\mathtt{GenerateKey}(1^\lambda) = sk\in \mathcal{K}$. Here $\lambda\in\mathbb{N}$ is the security parameter and sk is the secret key.&lt;/li&gt;
  &lt;li&gt;$\mathtt{Encode}$ and $\mathtt{Decode}$ have inputs in $\mathcal{K}\times\mathcal{M}$ and outputs in $\mathcal{C}$.&lt;/li&gt;
  &lt;li&gt;For all $sk$ in the target of $\mathtt{GenerateKey}$ and for all $m\in\mathcal{M}$, \[P[ \mathtt{Decode}(sk,\mathtt{Encode}(sk,m)) = m ]=1,\] where the probability is taken over the randomness in the algorithms $\mathtt{Encode}$ and $\mathtt{Decode}$.&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. --&gt;

&lt;!-- Jekyll also offers powerful support for code snippets:


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/ --&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Some reasons why this is useful:?. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">An encryption function is a way to transform a sequence of characters into another sequence of characters. We introduce some notation to formalize this a little bit. Let $\mathcal{M}$ be the set of all sequences of characters that you care about (for example, $\mathcal{M}$ may be the set of all strings of ASCII characters of arbitrary length or the set of all string of zeros and ones of length $256$). These sequences of characters are often called plaintexts. Let $\mathcal{C}$ be the set of all encrypted messages, i.e. another set of sequences of characters. These are called cyphertexts. Then an encryption function is just a function $e:\mathcal{M}\to\mathcal{C}$ (e stands for “encrypt”). To upgrade an encryption function to an encryption scheme, one needs also a way to decrypt encoded messages: that is, a function $d:\mathcal{C}\to\mathcal{M}$. The obvious requirement is that the decryption recovers the original message, namely, $d(e(m)) = m$ for all $m\in\mathcal{M}$. Note that this implies that $e$ defines a bijection between $\mathcal{M}$ and $e(\mathcal{M})\subset\mathcal{C}$. Also note that up to now we haven’t mentioned anything about security: after all, we can take $\mathcal{M}=\mathcal{C}$, $e=d=id$ in the definitions above. In the final definition, the functions will actually be algorithms (we want the encryption to be computable), of polynomial-time complexity (efficiently computable). For technical reasons, they will be probabilistic algorithms. For a formal definition of probabilistic algorithms see wikipedia - basically it is a Turing machine that at each state tosses a coin to determine which of two transition functions it follows.</summary></entry></feed>